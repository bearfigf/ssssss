def func1(arg1, arg2):
    var46 = func11()
    var51 = func12(arg2, var46)
    var52 = 2081693888 + var46
    var53 = arg1 ^ var46
    var54 = arg1 ^ var51
    var55 = var53 | var51
    if var54 < var52:
        var56 = arg1 + (arg1 ^ var54) + -317
    else:
        var56 = arg1 - -694194314 + var54 | -659
    if arg1 < var52:
        var57 = -322 + arg2
    else:
        var57 = arg1 ^ var51
    var58 = 867 & var52
    var59 = var53 + 628
    var60 = var46 - var54 & var51
    var61 = (852 & var46) + -805
    var62 = -549 | var60 ^ var58
    var63 = var54 | (-210 - var59 | 312)
    if var61 < arg1:
        var64 = 1528630521 + (var54 + arg2 & var53)
    else:
        var64 = ((arg2 - var63) ^ var62) + var60
    var65 = var58 & var60
    var66 = var59 | arg2
    var67 = ((var62 + var53) - var53) | var55
    var68 = 668 ^ var62
    var69 = var59 | var68
    var70 = var67 + var66
    var71 = var60 + var62 ^ var51
    var72 = arg2 + var58
    var73 = (var55 ^ var58 | var66) + var69
    var74 = var63 & var70 | var72 & var72
    var75 = (var46 | var73) ^ var59
    result = var68 + var74 + (var68 - (((var75 - arg1) + var65 + (var62 | ((var72 ^ var52) - var72))) - var62 | var69))
    return result
def func12(arg47, arg48):
    var49 = 0
    for var50 in xrange(35):
        var49 += -1 & arg48 - arg48
    return var49
def func11():
    func2()
    result = len(func4(-1, 9))
    func3()
    return result
def func5(arg5, arg6):
    if arg6 < arg5:
        var11 = class6()
    else:
        var11 = class8()
    for var12 in range(46):
        var13 = var11.func7
        var13(arg5, arg5)
    def func10(arg14, arg15):
        var16 = arg6 + arg5
        var17 = arg15 + (arg6 - var16)
        var18 = (var16 & arg14 - 858) ^ 477
        var19 = arg15 & arg14
        var20 = -259605228 | 1829599213 & arg5
        var21 = (arg15 & 774912118) | var19
        var22 = ((arg5 ^ arg6) - arg15) ^ var17
        var23 = arg14 & var17
        var24 = (-496148201 ^ var19 | arg5) ^ var22
        var25 = (var19 & var16 ^ var20) ^ var22
        var26 = (var16 ^ arg15 - arg14) & var24
        var27 = var18 - var19
        var28 = arg14 + var19
        var29 = var16 ^ (var18 & (var22 | arg14))
        var30 = arg6 - -728
        var31 = var29 ^ arg14 & var16
        result = (((var29 & (((var19 & var19 - var27 & 446) - arg6 ^ var31) | var21)) ^ var28) | var19) | var20 & arg6
        return result
    var32 = func10(arg6, arg5)
    var33 = var32 ^ arg5
    var34 = 946 ^ ((arg6 + arg5) | (((-862 - 403) - -727) & 584798428 | arg6)) ^ arg5 & -391 - arg5
    result = (arg6 & arg6) & arg5
    return result
class class8(object):
    def func7(self, arg9, arg10):
        return 0
class class6(object):
    def func7(self, arg7, arg8):
        result = (((((arg8 | 117557683) ^ arg7) | -1194111110) - arg8) | 1335858544) ^ -2115852028
        return result
def func4(arg3, arg4):
    var35 = func5(arg4, -236)
    yield var35
    var36 = -515 & (arg4 ^ arg4) - arg4
    yield var36
    var37 = var36 - (arg3 & var36 + arg3)
    yield var37
    var38 = var36 ^ ((var37 | arg4) ^ arg4)
    yield var38
    var39 = ((var37 + arg4) ^ arg3) & var36
    yield var39
    var40 = -495 & var37
    yield var40
    var41 = ((var39 ^ var40) + var40) ^ -327490156
    yield var41
    var42 = ((1283028299 + var37) | var39) ^ var39
    yield var42
    var43 = var41 & var38
    yield var43
    var44 = var40 & var40
    yield var44
    var45 = var38 & var44
    yield var45
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 6
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 76'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
